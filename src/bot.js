import { Bot } from 'grammy';
import { addSubscriber, removeSubscriber, getSubscriber, getAllActiveSubscribers } from './database.js';

/**
 * Envoie une notification √† l'administrateur lors d'une action d'abonnement/d√©sabonnement
 * @param {Bot} bot - Instance du bot Telegram
 * @param {string} action - Type d'action : 'subscribe' ou 'unsubscribe'
 * @param {object} userData - Informations sur l'utilisateur
 * @param {string} userData.nom - Nom de l'utilisateur
 * @param {string} userData.username - Username Telegram (optionnel)
 * @param {number} userData.chatId - ID du chat
 * @param {Date} userData.date - Date de l'action
 * @param {string|null} error - Message d'erreur si l'action a √©chou√©
 */
async function notifyAdmin(bot, action, userData, error = null) {
  const adminChatId = process.env.ADMIN_CHAT_ID;

  // Si ADMIN_CHAT_ID n'est pas configur√©, ne pas envoyer de notification
  if (!adminChatId) {
    console.log('‚ö†Ô∏è ADMIN_CHAT_ID non configur√© - notification admin ignor√©e');
    return;
  }

  try {
    // R√©cup√©rer le nombre total d'abonn√©s actifs
    const activeSubscribers = await getAllActiveSubscribers();
    const totalActifs = activeSubscribers.length;

    // D√©terminer l'emoji et le texte de l'action
    const actionEmoji = action === 'subscribe' ? 'üì•' : 'üì§';
    const actionText = action === 'subscribe' ? 'Nouvel abonnement' : 'D√©sabonnement';
    const statusEmoji = error ? '‚ùå' : '‚úÖ';
    const statusText = error ? '√âCHEC' : 'SUCC√àS';

    // Construire le message
    let message = `${actionEmoji} *${actionText}* - ${statusEmoji} ${statusText}\n\n`;

    message += `üë§ *Utilisateur :*\n`;
    message += `   ‚Ä¢ Nom : ${userData.nom}\n`;
    if (userData.username) {
      message += `   ‚Ä¢ Username : @${userData.username}\n`;
    }
    message += `   ‚Ä¢ Chat ID : \`${userData.chatId}\`\n`;
    message += `   ‚Ä¢ Date : ${userData.date.toLocaleString('fr-FR')}\n\n`;

    if (error) {
      message += `‚ö†Ô∏è *Erreur :*\n${error}\n\n`;
    }

    message += `üìä *Statistiques :*\n`;
    message += `   ‚Ä¢ Total abonn√©s actifs : ${totalActifs}`;

    // Envoyer la notification √† l'admin
    await bot.api.sendMessage(adminChatId, message, {
      parse_mode: 'Markdown'
    });

    console.log(`‚úÖ Notification admin envoy√©e pour ${actionText}`);
  } catch (notifyError) {
    // Ne pas bloquer le flux principal si la notification √©choue
    console.error('‚ùå Erreur lors de l\'envoi de la notification admin:', notifyError);
  }
}

/**
 * Cr√©e et configure le bot Telegram
 * @param {string} token - Le token du bot Telegram
 * @returns {Bot} Instance du bot configur√©e
 */
export function createBot(token) {
  const bot = new Bot(token);

  // Commande /start - Pr√©sentation du bot
  bot.command('start', async (ctx) => {
    const chatId = ctx.chat.id;

    const welcomeMessage = `
üëã Bonjour ! Je suis *ZoomChat*, votre assistant virtuel pour les petites annonces du *Zoom Hebdo* üá¨üá¶

üì∞ *Le Zoom Hebdo*, c'est le journal N¬∞1 d'annonces contr√¥l√©es au Gabon, publi√© chaque vendredi.

üîç *Je peux vous aider √† trouver* :
‚Ä¢ üè† Immobilier (locations, ventes, terrains)
‚Ä¢ üöó V√©hicules (voitures, utilitaires)
‚Ä¢ üíº Emplois (offres d'emploi, formations)
‚Ä¢ üì¶ Objets (mat√©riel, √©quipements)
‚Ä¢ ü§ù Services et rencontres
‚Ä¢ üè™ Fonds de commerce

üìã *Commandes disponibles* :
/start - Afficher ce message
/aide - Obtenir de l'aide et exemples
/abonner - S'abonner aux notifications automatiques
/desabonner - Se d√©sabonner des notifications

üí¨ *Comment chercher ?*
Envoyez-moi simplement ce que vous recherchez !
*Exemples :* "studio √† louer Libreville", "Toyota occasion", "cherche m√©nag√®re"

üì¨ *Astuce* : Utilisez /abonner pour recevoir automatiquement le PDF chaque vendredi !
    `.trim();

    // V√©rifier si l'utilisateur est abonn√©
    const subscriber = await getSubscriber(chatId);
    const isSubscribed = subscriber && subscriber.actif;

    // Afficher le bouton S'abonner uniquement si l'utilisateur n'est pas abonn√©
    const replyMarkup = isSubscribed ? {} : {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¨ S\'abonner', callback_data: 'subscribe' }]
        ]
      }
    };

    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...replyMarkup
    });
  });

  // Commande /aide (remplace /help)
  bot.command('aide', async (ctx) => {
    const chatId = ctx.chat.id;

    const helpMessage = `
‚ÑπÔ∏è *Aide - ZoomChat*

üîé *Comment rechercher une annonce ?*
Envoyez-moi un message d√©crivant ce que vous cherchez. Je parcourrai les annonces du Zoom Hebdo pour vous.

üìù *Exemples de recherches* :
‚Ä¢ appartement 3 chambres Owendo
‚Ä¢ voiture Toyota moins de 5 millions
‚Ä¢ emploi chauffeur permis CD
‚Ä¢ cherche nounou log√©e
‚Ä¢ terrain √† vendre Ntoum
‚Ä¢ salon de coiffure √† c√©der

üè∑Ô∏è *Cat√©gories disponibles* :
üè† Immobilier - üöó V√©hicules - üíº Emploi
üì¶ Objets - ü§ù People - üè™ Commerce

üì¨ *Abonnement automatique* :
‚Ä¢ /abonner - Recevez le PDF chaque vendredi automatiquement
‚Ä¢ /desabonner - Annulez votre abonnement
    `.trim();

    // V√©rifier si l'utilisateur est abonn√©
    const subscriber = await getSubscriber(chatId);
    const isSubscribed = subscriber && subscriber.actif;

    // Afficher le bouton S'abonner uniquement si l'utilisateur n'est pas abonn√©
    const replyMarkup = isSubscribed ? {} : {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¨ S\'abonner', callback_data: 'subscribe' }]
        ]
      }
    };

    await ctx.reply(helpMessage, {
      parse_mode: 'Markdown',
      ...replyMarkup
    });
  });

  // Commande /abonner - S'abonner aux publications automatiques
  bot.command('abonner', async (ctx) => {
    try {
      const chatId = ctx.chat.id;

      // V√©rifier si l'utilisateur est d√©j√† abonn√©
      const existingSubscriber = await getSubscriber(chatId);

      if (existingSubscriber && existingSubscriber.actif) {
        await ctx.reply(
          '‚úÖ Vous √™tes d√©j√† abonn√© aux notifications du Zoom Hebdo !\n\n' +
          `üìÖ Date d'abonnement : ${new Date(existingSubscriber.date_abonnement).toLocaleDateString('fr-FR')}\n\n` +
          'Vous recevrez automatiquement le PDF chaque vendredi.'
        );
        return;
      }

      // R√©cup√©rer le nom de l'utilisateur depuis Telegram
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';

      // Abonner l'utilisateur imm√©diatement (sans num√©ro de t√©l√©phone)
      await addSubscriber(chatId, nom, null);

      // Notifier l'admin du nouvel abonnement
      await notifyAdmin(bot, 'subscribe', {
        nom,
        username: ctx.from.username,
        chatId,
        date: new Date()
      });

      // Message de confirmation
      await ctx.reply(
        'üéâ *Abonnement confirm√© !*\n\n' +
        `üë§ Nom : ${nom}\n` +
        `üìÖ Date : ${new Date().toLocaleDateString('fr-FR')}\n\n` +
        '‚úÖ Vous recevrez d√©sormais le PDF du Zoom Hebdo automatiquement chaque vendredi.\n\n' +
        'üí° Pour vous d√©sabonner, utilisez la commande /desabonner',
        {
          parse_mode: 'Markdown',
          reply_markup: { remove_keyboard: true }
        }
      );
    } catch (error) {
      console.error('Erreur commande /abonner:', error);

      // Notifier l'admin de l'erreur
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';
      await notifyAdmin(bot, 'subscribe', {
        nom,
        username: ctx.from.username,
        chatId,
        date: new Date()
      }, error.message);

      await ctx.reply('‚ùå Une erreur est survenue. Veuillez r√©essayer plus tard.');
    }
  });

  // Commande /desabonner - Se d√©sabonner des notifications
  bot.command('desabonner', async (ctx) => {
    try {
      const chatId = ctx.chat.id;

      // V√©rifier si l'utilisateur est abonn√©
      const subscriber = await getSubscriber(chatId);

      if (!subscriber || !subscriber.actif) {
        await ctx.reply(
          '‚ùå Vous n\'√™tes pas abonn√© aux notifications.\n\n' +
          'Utilisez /abonner pour vous abonner.'
        );
        return;
      }

      // R√©cup√©rer le nom de l'utilisateur depuis Telegram
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';

      // D√©sactiver l'abonnement
      const success = await removeSubscriber(chatId);

      if (success) {
        // Notifier l'admin du d√©sabonnement
        await notifyAdmin(bot, 'unsubscribe', {
          nom,
          username: ctx.from.username,
          chatId,
          date: new Date()
        });

        await ctx.reply(
          '‚úÖ D√©sabonnement effectu√©\n\n' +
          'Vous ne recevrez plus les notifications automatiques du Zoom Hebdo.\n\n' +
          'üí° Vous pouvez vous r√©abonner √† tout moment avec la commande /abonner'
        );
      } else {
        await ctx.reply('‚ùå Une erreur est survenue. Veuillez r√©essayer.');
      }
    } catch (error) {
      console.error('Erreur commande /desabonner:', error);

      // Notifier l'admin de l'erreur
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';
      await notifyAdmin(bot, 'unsubscribe', {
        nom,
        username: ctx.from.username,
        chatId,
        date: new Date()
      }, error.message);

      await ctx.reply('‚ùå Une erreur est survenue. Veuillez r√©essayer plus tard.');
    }
  });

  // Gestionnaire du bouton "S'abonner"
  bot.callbackQuery('subscribe', async (ctx) => {
    try {
      await ctx.answerCallbackQuery(); // R√©pondre au callback pour enlever l'indicateur de chargement

      const chatId = ctx.chat.id;

      // V√©rifier si l'utilisateur est d√©j√† abonn√©
      const existingSubscriber = await getSubscriber(chatId);

      if (existingSubscriber && existingSubscriber.actif) {
        await ctx.reply(
          '‚úÖ Vous √™tes d√©j√† abonn√© aux notifications du Zoom Hebdo !\n\n' +
          `üìÖ Date d'abonnement : ${new Date(existingSubscriber.date_abonnement).toLocaleDateString('fr-FR')}\n\n` +
          'Vous recevrez automatiquement le PDF chaque vendredi.'
        );
        return;
      }

      // R√©cup√©rer le nom de l'utilisateur depuis Telegram
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';

      // Abonner l'utilisateur imm√©diatement (sans num√©ro de t√©l√©phone)
      await addSubscriber(chatId, nom, null);

      // Notifier l'admin du nouvel abonnement
      await notifyAdmin(bot, 'subscribe', {
        nom,
        username: ctx.from.username,
        chatId,
        date: new Date()
      });

      // Message de confirmation
      await ctx.reply(
        'üéâ *Abonnement confirm√© !*\n\n' +
        `üë§ Nom : ${nom}\n` +
        `üìÖ Date : ${new Date().toLocaleDateString('fr-FR')}\n\n` +
        '‚úÖ Vous recevrez d√©sormais le PDF du Zoom Hebdo automatiquement chaque vendredi.\n\n' +
        'üí° Pour vous d√©sabonner, utilisez la commande /desabonner',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Erreur callback subscribe:', error);

      // Notifier l'admin de l'erreur
      const nom = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 'Utilisateur';
      await notifyAdmin(bot, 'subscribe', {
        nom,
        username: ctx.from.username,
        chatId,
        date: new Date()
      }, error.message);

      await ctx.reply('‚ùå Une erreur est survenue. Veuillez r√©essayer plus tard.');
    }
  });

  // Gestion des erreurs
  bot.catch((err) => {
    console.error('Erreur du bot:', err);
  });

  return bot;
}
